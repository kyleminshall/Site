<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8" /></head><body style="font-family: sans;"><p>
San Jose State University<br/>
CS46b: Data Structures<br/>
Assignment 03 Draft<br/>
</p>
<p>
This assignment tests IO and exceptions. You must implement the Loadable interface on the 
Product and Order classed.
</p>
<p>
DRAFT: Add the methods for the Loadable interface to the Order and Product classes. Leave the implementation empty for now. See comments for full spec.
</p>
<p>
FINAL: Implement the Loadable interface for the Order and Product classes. Make sure to use the given file formats, and handle exceptions as indicated. See comments for full spec.
</p>
<p>
You should turn in a zipped Code Check report that is automatically generated
when you submit your work to Code Check.
</p><p>Use the following files:</p><p>Loadable.java</p>
<pre>public interface Loadable
{
	/**
	 * Saves the object to a file.
	 * 
	 * @param filename the file to save to
	 */
	public void saveToFile(String filename);

	/**
	 * Loads an object from a file.
	 * 
	 * @param filename the file to load from
	 */
	public void loadFromFile(String filename);
}
</pre
><p>Tester2.java</p>
<pre>public class Tester2
{
	public static void main(String[] args)
	{

		Product p1 = new Product();
		p1.loadFromFile("Monitor.pr");
		System.out.println("Actual: " + p1.toString());
		System.out.println("Expected: Product [id=12345, name=Monitor, description=A freakin great monitor!]");
		
		p1.setId(11111);
		p1.setName("another product");
		p1.setDescription("Description of another product!");
		
		p1.saveToFile("SaveTest1.pr");
		p1 = null;
		p1 = new Product();
		
		p1.loadFromFile("SaveTest1.pr");
		System.out.println("Actual: " + p1.toString());
		System.out.println("Expected: Product [id=11111, name=another product, description=Description of another product!]");

		Order o1 = new Order();
		o1.loadFromFile("Order1.or");
		System.out.println("Actual: " + o1.toString());
		System.out.println("Expected: Order [productId=[113489, 201934, 3488, 84432], quantity=[11, 22, 12, 3]]");
		
		o1 = null;
		o1 = new Order();
		o1.addProduct(1, 4);
		o1.addProduct(2, 3);
		o1.addProduct(3, 2);
		o1.addProduct(4, 1);
		
		o1.saveToFile("SaveTest2.or");
		o1 = null;
		o1 = new Order();
		
		o1.loadFromFile("SaveTest2.or");
		System.out.println("Actual: " + o1.toString());
		System.out.println("Expected: Order [productId=[1, 2, 3, 4], quantity=[4, 3, 2, 1]]");

		Order o2 = new Order();
		System.out.print("Actual: ");
		o2.loadFromFile("BadOrder.or");
		System.out.println("Expected: Unable to load order from BadOrder.or.");

		
		Product p2 = new Product();
		System.out.print("Actual: ");
		p2.loadFromFile("BadProduct.pr");
		System.out.println("Expected: Unable to load product from BadProduct.pr.");

	}
}
</pre
><form method="post" action="/codecheck/check" ><p>Complete the following files:</p><p>Order.java</p><textarea name="Order.java" rows="100" cols="66">import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * This class encapsulates an order in
 * an online store.
 * 
 * Draft: Add the methods in the Loadable
 * interface. Leave the implementation
 * empty.
 * 
 * Final: Add the implementation for the 
 * Loadable interface. 
 *
 */
public class Order implements Loadable
{
	private ArrayList&lt;Integer&gt; productId;
	private ArrayList&lt;Integer&gt; quantity;
	
	public Order()
	{
		productId = new ArrayList&lt;Integer&gt;();
		quantity = new ArrayList&lt;Integer&gt;();
	}
	
	public void addProduct(int id, int qty)
	{
		productId.add(id);
		quantity.add(qty);
	}
	
	public int size()
	{
		return productId.size();
	}
	
	public String toString()
	{
		return "Order [productId=" + productId.toString() + ", quantity=" + quantity.toString() + "]";
	}

	/**
	 * Save an order to a file. Each id, quantity
	 * pair be on its own line. id will come first,
	 * then a comma, then a newline. Then the next
	 * line will contain another id,quantity pair
	 * if there are more products in this order.
	 * 
	 * There may be arbitrarily many id,product
	 * pairs in an order.
	 * 
	 * You must catch and handle exceptions
	 * properly. Data in the file may be incorrectly
	 * formatted, or the file may be absent. Or
	 * other errors could occur. If an exception
	 * occurs, then print "Unable to save order to Filename.\n"
	 * where Filename is replaced with the actual 
	 * value in Filename.
	 * 
	 * File Example:
	 * 12345,1
	 * 111,2
	 * 555,7
	 * 8888,23
	 * 
	 * @param Filename the location of the file that contains the information for this Order
	 */
	// YOUR CODE HERE

	/**
	 * Load an order from a file. Each id, quantity
	 * pair be on its own line. id will come first,
	 * then a comma, then a newline. Then the next
	 * line will contain another id,quantity pair
	 * if there are more products in this order.
	 * 
	 * There may be arbitrarily many id,product
	 * pairs in an order.
	 * 
	 * You must catch and handle exceptions
	 * properly. Data in the file may be incorrectly
	 * formatted, or the file may be absent. Or
	 * other errors could occur. If an exception
	 * occurs, then print "Unable to load order from Filename.\n"
	 * where Filename is replaced with the actual 
	 * value in Filename.
	 * 
	 * File Example:
	 * 12345,1
	 * 111,2
	 * 555,7
	 * 8888,23
	 * 
	 * @param Filename the location of the file that contains the information for this Order
	 */
	// YOUR CODE HERE
}
</textarea><p>Product.java</p><textarea name="Product.java" rows="92" cols="66">import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * This class encapsulates a product in
 * an online store.
 * 
 * Draft: Add the methods in the Loadable
 * interface. Leave the implementation
 * empty.
 * 
 * Final: Add the implementation for the 
 * Loadable interface. 
 *
 */
public class Product implements Loadable
{
	private int id;
	private String name;
	private String description;
	
	public Product(){}
	public Product(int newId, String newName, String newDescription)
	{
		id = newId;
		name = newName;
		description = newDescription;
	}
	
	public int getId() { return id; }
	public void setId(int newId) { id = newId; }
	
	public String getName() { return name; }
	public void setName(String newName) { name = newName; }
	
	public String getDescription() { return description; }
	public void setDescription(String newDescription) { description = newDescription; }

	public String toString()
	{
		return "Product [id=" + id + ", name=" + name + ", description=" + description + "]";  
	}
	
	/**
	 * Save a product to a file. Each value
	 * will be on its own line. id will be on 
	 * the first line, name will be on the second
	 * line, and description will be on the third
	 * line.
	 * 
	 * You must catch and handle exceptions
	 * properly. Data in the file may be incorrectly
	 * formatted, or the file may be absent. Or
	 * other errors could occur. If an exception
	 * occurs, then print "Unable to save product to Filename.\n"
	 * where Filename is replaced with the actual 
	 * value in Filename.
	 * 
	 * File Example:
	 * 12345
	 * Mechanical Keyboard
	 * The greatest mechanical keyboard that has ever existed.
	 * 
	 * @param Filename the location of the file that contains the information for this Product
	 */
	// YOUR CODE HERE

	/**
	 * Load a product from a file. Each value
	 * will be on its own line. id will be on 
	 * the first line, name will be on the second
	 * line, and description will be on the third
	 * line.
	 * 
	 * You must catch and handle exceptions
	 * properly. Data in the file may be incorrectly
	 * formatted, or the file may be absent. Or
	 * other errors could occur. If an exception
	 * occurs, then print "Unable to load product from Filename.\n"
	 * where Filename is replaced with the actual
	 * Filename.
	 * 
	 * File Example:
	 * 12345
	 * Mechanical Keyboard
	 * The greatest mechanical keyboard that has ever existed.
	 * 
	 * @param Filename the location of the file that contains the information for this Product
	 */
	// YOUR CODE HERE
}
</textarea><p><input type="submit"/><input type="hidden" name="repo" value="ext"><input type="hidden" name="problem" value="14091611288b5sv093k9shrqztw24rqg3ol"><input type="hidden" name="level" value="check"></p></form></body></html>